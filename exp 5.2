const express = require('express');
const mongoose = require('mongoose');
const app = express();

app.use(express.json());

// --- Mongoose Model ---
const studentSchema = new mongoose.Schema({
  name: { type: String, required: true },
  age: { type: Number, required: true },
  course: { type: String, required: true }
});
const Student = mongoose.model('Student', studentSchema);

// --- Controller functions (normally in controllers/studentController.js) ---
const getAllStudents = async (req, res) => {
  try {
    const students = await Student.find({});
    res.status(200).json(students);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
const getStudentById = async (req, res) => {
  try {
    const student = await Student.findById(req.params.id);
    if (!student) return res.status(404).json({ message: "Student not found" });
    res.status(200).json(student);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
const createStudent = async (req, res) => {
  try {
    const student = new Student(req.body);
    await student.save();
    res.status(201).json(student);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};
const deleteStudentById = async (req, res) => {
  try {
    const deleted = await Student.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ message: "Student not found" });
    res.status(200).json({ message: "Student deleted", student: deleted });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// --- Route definitions (normally routes/studentRoutes.js) ---
app.get('/students', getAllStudents);
app.get('/students/:id', getStudentById);
app.post('/students', createStudent);
app.delete('/students/:id', deleteStudentById);

// --- DB connect and start server ---
mongoose.connect('mongodb://localhost:27017/studentdb', {
  useNewUrlParser: true, useUnifiedTopology: true
});
app.listen(3000, () => console.log('Server running on port 3000'));
